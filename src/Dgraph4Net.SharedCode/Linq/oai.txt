using System.Text;

namespace Dgraph4Net;

public class DGraphQueryBuilder
{
    private readonly StringBuilder queryBuilder;
    
    public DGraphQueryBuilder()
    {
        queryBuilder = new StringBuilder();
    }

    public DGraphQueryBuilder AddQuery(string query)
    {
        queryBuilder.AppendLine(query);
        return this;
    }

    public DGraphQueryBuilder AddVariable(string variableName, string variableValue)
    {
        queryBuilder.AppendLine($"${variableName}: {variableValue}");
        return this;
    }

    public DGraphQueryBuilder AddVar<T>(string alias, Action<VarQueryBuilder<T>> varBuilder)
    {
        var queryBuilder = new VarQueryBuilder<T>(alias);
        varBuilder(queryBuilder);
        this.queryBuilder.AppendLine(queryBuilder.Build());
        return this;
    }

    public DGraphQueryBuilder AddFor<T>(string alias, Action<ForQueryBuilder<T>> forBuilder)
    {
        var queryBuilder = new ForQueryBuilder<T>(alias);
        forBuilder(queryBuilder);
        this.queryBuilder.AppendLine(queryBuilder.Build());
        return this;
    }

    public DGraphQueryBuilder AddAggregate(string aggregateName, Action<AggregateQueryBuilder> aggregateBuilder)
    {
        var queryBuilder = new AggregateQueryBuilder(aggregateName);
        aggregateBuilder(queryBuilder);
        this.queryBuilder.AppendLine(queryBuilder.Build());
        return this;
    }

    public string Build()
    {
        return queryBuilder.ToString().Trim();
    }

    public void Clear()
    {
        queryBuilder.Clear();
    }
}

public class VarQueryBuilder<T>
{
    private StringBuilder queryBuilder;
    private string alias;

    public VarQueryBuilder(string alias)
    {
        queryBuilder = new StringBuilder();
        this.alias = alias;
    }

    public VarQueryBuilder<T> Predicate<TProp>(Func<T, TProp> propertySelector, Action<PredicateQueryBuilder> predicateBuilder)
    {
        var propertyName = GetPropertyName(propertySelector);
        var queryBuilder = new PredicateQueryBuilder(propertyName);
        predicateBuilder(queryBuilder);
        this.queryBuilder.AppendLine(queryBuilder.Build());
        return this;
    }

    public VarQueryBuilder<T> Count<TProp>(Func<T, IEnumerable<TProp>> propertySelector)
    {
        var propertyName = GetPropertyName(propertySelector);
        this.queryBuilder.AppendLine($"${alias} as count({propertyName})");
        return this;
    }

    public string Build()
    {
        return queryBuilder.ToString().Trim();
    }

    private string GetPropertyName<TProp>(Func<T, TProp> propertySelector)
    {
        var propertyInfo = typeof(T).GetProperty(propertySelector.Method.Name.Substring(4));
        return propertyInfo.Name;
    }
}

public class ForQueryBuilder<T>
{
    private StringBuilder queryBuilder;
    private string alias;

    public ForQueryBuilder(string alias)
    {
        queryBuilder = new StringBuilder();
        this.alias = alias;
    }

    public ForQueryBuilder<T> Filter(Action<FilterQueryBuilder<T>> filterBuilder)
    {
        var queryBuilder = new FilterQueryBuilder<T>();
        filterBuilder(queryBuilder);
        this.queryBuilder.AppendLine(queryBuilder.Build());
        return this;
    }

    public ForQueryBuilder<T> Select(Action<SelectQueryBuilder<T>> selectBuilder)
    {
        var queryBuilder = new SelectQueryBuilder<T>();
        selectBuilder(queryBuilder);
        this.queryBuilder.AppendLine(queryBuilder.Build());
        return this;
    }

    public string Build()
    {
        return $"for {alias} {queryBuilder.ToString().Trim()}";
    }
}

public class FilterQueryBuilder<T>
{
    private StringBuilder queryBuilder;

    public FilterQueryBuilder()
    {
        queryBuilder = new StringBuilder();
    }

    public FilterQueryBuilder<T> Eq<TProp>(Func<T, TProp> propertySelector, object value)
    {
        var propertyName = GetPropertyName(propertySelector);
        queryBuilder.AppendLine($"eq({propertyName}, {FormatValue(value)})");
        return this;
    }

    public FilterQueryBuilder<T> Ge<TProp>(Func<T, TProp> propertySelector, object value)
    {
        var propertyName = GetPropertyName(propertySelector);
        queryBuilder.AppendLine($"ge({propertyName}, {FormatValue(value)})");
        return this;
    }

    public FilterQueryBuilder<T> Uid<TProp>(Func<T, TProp> propertySelector)
    {
        var propertyName = GetPropertyName(propertySelector);
        queryBuilder.AppendLine($"uid({propertyName})");
        return this;
    }

    public string Build()
    {
        return queryBuilder.ToString().Trim();
    }

    private string GetPropertyName<TProp>(Func<T, TProp> propertySelector)
    {
        var propertyInfo = typeof(T).GetProperty(propertySelector.Method.Name.Substring(4));
        return propertyInfo.Name;
    }

    private string FormatValue(object value)
    {
        if (value is string)
        {
            return $"\"{value}\"";
        }
        else
        {
            return value.ToString();
        }
    }
}

public class SelectQueryBuilder<T>
{
    private StringBuilder queryBuilder;
    private int edgeCounter;

    public SelectQueryBuilder()
    {
        queryBuilder = new StringBuilder();
        edgeCounter = 0;
    }

    public SelectQueryBuilder<T> Predicate<TProp>(Func<T, TProp> propertySelector)
    {
        var propertyName = GetPropertyName(propertySelector);
        queryBuilder.AppendLine(propertyName);
        return this;
    }

    public SelectQueryBuilder<T> Var<TProp>(Func<T, TProp> propertySelector, string variableName)
    {
        var propertyName = GetPropertyName(propertySelector);
        queryBuilder.AppendLine($"{variableName}: val({propertyName})");
        return this;
    }

    public SelectQueryBuilder<T> Count<TProp>(Func<T, IEnumerable<TProp>> propertySelector, Action<EdgeQueryBuilder<TProp>> edgeBuilder)
    {
        var propertyName = GetPropertyName(propertySelector);
        var edgeQueryBuilder = new EdgeQueryBuilder<TProp>(edgeCounter.ToString());
        edgeBuilder(edgeQueryBuilder);
        queryBuilder.AppendLine($"{propertyName}: count({edgeQueryBuilder.Build()})");
        edgeCounter++;
        return this;
    }

    public string Build()
    {
        return queryBuilder.ToString().Trim();
    }

    private string GetPropertyName<TProp>(Func<T, TProp> propertySelector)
    {
        var propertyInfo = typeof(T).GetProperty(propertySelector.Method.Name.Substring(4));
        return propertyInfo.Name;
    }
}

public class EdgeQueryBuilder<T>
{
    private StringBuilder queryBuilder;
    private string alias;

    public EdgeQueryBuilder(string alias)
    {
        queryBuilder = new StringBuilder();
        this.alias = alias;
    }

    public EdgeQueryBuilder<T> OrderBy<TProp>(Func<T, TProp> propertySelector)
    {
        var propertyName = GetPropertyName(propertySelector);
        queryBuilder.AppendLine($"orderasc: {propertyName}");
        return this;
    }

    public EdgeQueryBuilder<T> Filter<TProp>(Func<T, TProp> propertySelector, Action<FilterQueryBuilder<TProp>> filterBuilder)
    {
        var propertyName = GetPropertyName(propertySelector);
        var queryBuilder = new FilterQueryBuilder<TProp>();
        filterBuilder(queryBuilder);
        this.queryBuilder.AppendLine($"{propertyName} @filter({queryBuilder.Build()})");
        return this;
    }

    public string Build()
    {
        return $"{alias} ({queryBuilder.ToString().Trim()})";
    }

    private string GetPropertyName<TProp>(Func<T, TProp> propertySelector)
    {
        var propertyInfo = typeof(T).GetProperty(propertySelector.Method.Name.Substring(4));
        return propertyInfo.Name;
    }
}

public class PredicateQueryBuilder
{
    private StringBuilder queryBuilder;
    private string predicateName;

    public PredicateQueryBuilder(string predicateName)
    {
        queryBuilder = new StringBuilder();
        this.predicateName = predicateName;
    }

    public PredicateQueryBuilder Predicate(string predicate)
    {
        queryBuilder.AppendLine($"{predicateName}.{predicate}");
        return this;
    }

    public string Build()
    {
        return queryBuilder.ToString().Trim();
    }
}

public class AggregateQueryBuilder
{
    private StringBuilder queryBuilder;
    private string aggregateName;

    public AggregateQueryBuilder(string aggregateName)
    {
        queryBuilder = new StringBuilder();
        this.aggregateName = aggregateName;
    }

    public AggregateQueryBuilder Sum(string resultName, string variableName)
    {
        queryBuilder.AppendLine($"{resultName}: sum(val({variableName}))");
        return this;
    }

    public string Build()
    {
        return $"{aggregateName} {{ {queryBuilder.ToString().Trim()} }}";
    }
}
